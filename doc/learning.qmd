---
title: "Draft R Markdown document"
author: "Your Name"
format: html
---

```{r setup}
library(tidyverse)
library(vroom)
library(here)
```

## Importing raw data

To import data, here the library _vroom_ is used as it is faster that other type of importers. 

For a person to read the code, it is important for the reader to know what are the types of data in the columns. To set the type of columns, import the data a first time with _vroom_. Then run _spec()_ to see the type of data that was assumed. Check that it is correct (for instance, be careful of time that is imported as double), copy/paste the resulting _cols()_ into the _col_types_ option of _vroom_.

For importing data faster, it is possible to specify to import only a few columns with _col_select_ argument of _vroom_. Use the _-_ to remove one column, either with the column name or column number. It is also possible to have _cols_only()_ 

For fixing the name of the columns, the argument _.name_repair_ can be used. A function can be put as entry for this. If writing the function with _()_, R runs the function first and then the _vroom_ function. By removing the _()_, R unerstands the function as an object now. Do not forget to update the name of the columns in the col_types.

```{r}
user_1_info_file <- here("data-raw/mmash/user_1/user_info.csv")
user_1_info_data <- vroom(user_1_info_file) # First import the file
spec(user_1_info_data) # Print the column specifications
user_1_info_data <- vroom(
  user_1_info_file,
  col_select = -1,
  col_types = cols(
    col_skip(),
    gender = col_character(),
    weight = col_double(),
    height = col_double(),
    age = col_double()
  ), # col_types to force the type of data
  .name_repair = snakecase::to_snake_case
) # Import data again
```
## Exercise: Import the saliva data

```{r}
user_1_saliva_file <- here("data-raw/mmash/user_1/saliva.csv")
user_1_saliva_data_prep <- vroom(
  user_1_saliva_file,
  col_select = -1,
  .name_repair = snakecase::to_snake_case
)
spec(user_1_saliva_data_prep)

user_1_saliva_data <- vroom(
  user_1_saliva_file,
  col_select = -1,
  col_types = cols(
    col_skip(),
    samples = col_character(),
    cortisol_norm = col_double(),
    melatonin_norm = col_double()
  ),
  .name_repair = snakecase::to_snake_case
)
```

## Importing longer datasets

When the dataset if very long, it can be very time consuming to import the dataset. The argument _n_max_ is used to import only a few rows at first to guess the 

```{r}
user_1_rr_file <- here("data-raw/mmash/user_1/RR.csv")
user_1_rr_data_prep <- vroom(
  user_1_rr_file,
  col_select = -1,
  n_max = 100,
  .name_repair = snakecase::to_snake_case
)
spec(user_1_rr_data_prep)
user_1_rr_data <- vroom(
  user_1_rr_file,
  col_select = -1,
  col_types = cols(
    col_skip(),
    ibi_s = col_double(),
    day = col_double(),
    time = col_time(format = "")
  ),
  .name_repair = snakecase::to_snake_case
)
```

## Exercise: Import the Actigraph data

```{r}
user_1_actigraph_file <- here("data-raw/mmash/user_1/Actigraph.csv")
user_1_actigraph_data_prep <- vroom(
  user_1_actigraph_file,
  col_select = -1,
  n_max = 100,
  .name_repair = snakecase::to_snake_case
)
spec(user_1_actigraph_data_prep)
user_1_actigraph_data <- vroom(
  user_1_actigraph_file,
  col_select = -1,
  col_types = cols(
    col_skip(),
    axis_1 = col_double(),
    axis_2 = col_double(),
    axis_3 = col_double(),
    steps = col_double(),
    hr = col_double(),
    inclinometer_off = col_double(),
    inclinometer_standing = col_double(),
    inclinometer_sitting = col_double(),
    inclinometer_lying = col_double(),
    vector_magnitude = col_double(),
    day = col_double(),
    time = col_time(format = "")
  ),
  .name_repair = snakecase::to_snake_case
)
```

## Making a function

Basic structure of a function:
name <- function(argument1, argument2) {
    # body of function
    output <- ... code ....
    return(output)
}

Add a _roxygen_ to document the function. The _@export_ if when building packages (not used here).

```{r}
#' Add numbers
#'
#' @param num1 a number
#' @param num2 a number
#'
#' @return The sum of two numbers
add_numbers <- function(num1, num2) {
  added <- num1 + num2
  return(added)
}
add_numbers(2, 8)
```
